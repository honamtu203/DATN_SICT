package com.qltc.finace.utils

import android.content.ContentValues
import android.content.Context
import android.content.Intent
import android.graphics.Bitmap
import android.graphics.Canvas
import android.graphics.Color
import android.graphics.drawable.Drawable
import android.net.Uri
import android.os.Environment
import android.provider.MediaStore
import android.util.Log
import android.view.View
import androidx.core.content.ContextCompat
import androidx.core.content.FileProvider
import com.github.mikephil.charting.charts.PieChart
import com.itextpdf.text.*
import com.itextpdf.text.pdf.*
import com.itextpdf.text.pdf.draw.LineSeparator
import com.qltc.finace.R
import com.qltc.finace.data.entity.CategoryExpenseDetail
import com.qltc.finace.data.entity.CategoryIncomeDetail
import com.qltc.finace.data.entity.Expense
import com.qltc.finace.data.entity.Income
import com.qltc.finace.view.main.calendar.FinancialRecord
import java.io.ByteArrayOutputStream
import java.io.File
import java.io.FileOutputStream
import java.io.IOException
import java.text.DecimalFormat
import java.text.NumberFormat
import java.text.SimpleDateFormat
import java.time.LocalDate
import java.time.YearMonth
import java.time.format.DateTimeFormatter
import java.util.*

class PdfExportHelper(private val context: Context) {
    
    companion object {
        private const val TAG = "PdfExportHelper"
        private const val FILE_PROVIDER_AUTHORITY = "com.qltc.finace.fileprovider"
        
        // Export types
        const val TYPE_EXPENSE = 0
        const val TYPE_INCOME = 1
        const val TYPE_BOTH = 2
        
        // Display options
        const val OPTION_SHOW_CHARTS = 1
        const val OPTION_SHOW_DETAILS = 2
        const val OPTION_SHOW_STATISTICS = 4
    }
    
    private val formatter = NumberFormat.getCurrencyInstance(Locale("vi", "VN")).apply {
        maximumFractionDigits = 0
    }
    
    // S·ª≠ d·ª•ng ƒë·ªãnh d·∫°ng dd/MM/yyyy cho hi·ªÉn th·ªã ng∆∞·ªùi d√πng trong PDF
    private val dateFormatter = DateTimeFormatter.ofPattern("dd/MM/yyyy", Locale.getDefault())
    private val monthYearFormatter = DateTimeFormatter.ofPattern("MM/yyyy", Locale.getDefault())
    
    /**
     * Create a PDF report based on the provided parameters
     * 
     * @param fileName Name for the PDF file (without extension)
     * @param startDate Start date for the report
     * @param endDate End date for the report
     * @param reportType Type of data to include (expense, income, or both)
     * @param displayOptions Bitwise flags for what to display (charts, details, stats)
     * @param expenseData List of expense data by category
     * @param incomeData List of income data by category
     * @param expensePieChart Optional chart for expense data
     * @param incomePieChart Optional chart for income data
     * @return Uri to the generated PDF file or null if failed
     */
    fun createPdfReport(
        fileName: String,
        startDate: LocalDate,
        endDate: LocalDate,
        reportType: Int,
        displayOptions: Int,
        expenseData: List<CategoryExpenseDetail>? = null,
        incomeData: List<CategoryIncomeDetail>? = null,
        expensePieChart: PieChart? = null,
        incomePieChart: PieChart? = null
    ): Uri? {
        try {
            // Create PDF document
            val document = Document(PageSize.A4)
            
            // S·ª≠ d·ª•ng ph∆∞∆°ng th·ª©c an to√†n cho t·∫•t c·∫£ phi√™n b·∫£n Android
            val pdfFile: File
            val fileOutputStream: FileOutputStream
            
            // T·∫°o file trong directory c·ªßa ·ª©ng d·ª•ng
            if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.Q) {
                // S·ª≠ d·ª•ng th∆∞ m·ª•c chuy√™n d·ª•ng tr√™n Android 10+
                val contentValues = android.content.ContentValues().apply {
                    put(android.provider.MediaStore.MediaColumns.DISPLAY_NAME, "$fileName.pdf")
                    put(android.provider.MediaStore.MediaColumns.MIME_TYPE, "application/pdf")
                    put(android.provider.MediaStore.MediaColumns.RELATIVE_PATH, "Documents/QLTC")
                }
                
                val contentUri = android.provider.MediaStore.Files.getContentUri("external")
                val uri = context.contentResolver.insert(contentUri, contentValues)
                
                if (uri != null) {
                    fileOutputStream = context.contentResolver.openOutputStream(uri) as FileOutputStream
                    
                    PdfWriter.getInstance(document, fileOutputStream)
                    document.open()
                    
                    // Add document header
                    addDocumentHeader(document, startDate, endDate, reportType)
                    
                    // Add content based on report type
                    addReportContent(document, reportType, displayOptions, expenseData, incomeData, expensePieChart, incomePieChart)
                    
                    // Close the document
                    document.close()
                    fileOutputStream.close()
                    
                    return uri
                } else {
                    throw Exception("Kh√¥ng th·ªÉ t·∫°o file PDF")
                }
            } else {
                // S·ª≠ d·ª•ng ph∆∞∆°ng th·ª©c c≈© cho Android 9 tr·ªü xu·ªëng
                val pdfDir = File(
                    Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOCUMENTS),
                    "QLTC"
                )
                if (!pdfDir.exists()) {
                    pdfDir.mkdirs()
                }
                
                pdfFile = File(pdfDir, "$fileName.pdf")
                fileOutputStream = FileOutputStream(pdfFile)
                
                PdfWriter.getInstance(document, fileOutputStream)
                document.open()
                
                // Add document header
                addDocumentHeader(document, startDate, endDate, reportType)
                
                // Add content based on report type
                addReportContent(document, reportType, displayOptions, expenseData, incomeData, expensePieChart, incomePieChart)
                
                // Close the document
                document.close()
                fileOutputStream.close()
                
                // Return URI for the generated file
                return FileProvider.getUriForFile(
                    context,
                    FILE_PROVIDER_AUTHORITY,
                    pdfFile
                )
            }
        } catch (e: Exception) {
            Log.e(TAG, "Error creating PDF: ${e.message}", e)
            return null
        }
    }
    
    /**
     * Create a PDF report specifically for Android Q+ using MediaStore
     * 
     * @param contentValues MediaStore ContentValues with file details
     * @param startDate Start date for the report
     * @param endDate End date for the report
     * @param reportType Type of data to include (expense, income, or both)
     * @param displayOptions Bitwise flags for what to display (charts, details, stats)
     * @param expenseData List of expense data by category
     * @param incomeData List of income data by category
     * @param expensePieChart Optional chart for expense data
     * @param incomePieChart Optional chart for income data
     * @return Uri to the generated PDF file or null if failed
     */
    fun createPdfReportWithMediaStore(
        contentValues: ContentValues,
        startDate: LocalDate,
        endDate: LocalDate,
        reportType: Int,
        displayOptions: Int,
        expenseData: List<CategoryExpenseDetail>? = null,
        incomeData: List<CategoryIncomeDetail>? = null,
        expensePieChart: PieChart? = null,
        incomePieChart: PieChart? = null
    ): Uri? {
        try {
            // Create PDF document
            val document = Document(PageSize.A4)
            
            val contentUri = MediaStore.Files.getContentUri("external")
            val uri = context.contentResolver.insert(contentUri, contentValues)
                ?: throw IOException("Kh√¥ng th·ªÉ t·∫°o file PDF")
            
            val outputStream = context.contentResolver.openOutputStream(uri)
                ?: throw IOException("Kh√¥ng th·ªÉ m·ªü file ƒë·ªÉ ghi")
            
            PdfWriter.getInstance(document, outputStream)
            document.open()
            
            // Add document header
            addDocumentHeader(document, startDate, endDate, reportType)
            
            // Add content based on report type
            addReportContent(document, reportType, displayOptions, expenseData, incomeData, expensePieChart, incomePieChart)
            
            // Close the document
            document.close()
            outputStream.close()
            
            return uri
        } catch (e: Exception) {
            Log.e(TAG, "Error creating PDF with MediaStore: ${e.message}", e)
            throw e
        }
    }
    
    /**
     * Add report content to PDF document in the correct order based on report type
     */
    private fun addReportContent(
        document: Document,
        reportType: Int,
        displayOptions: Int,
        expenseData: List<CategoryExpenseDetail>? = null,
        incomeData: List<CategoryIncomeDetail>? = null,
        expensePieChart: PieChart? = null,
        incomePieChart: PieChart? = null
    ) {
        val showCharts = (displayOptions and OPTION_SHOW_CHARTS) != 0
        val showStats = (displayOptions and OPTION_SHOW_STATISTICS) != 0
        val showDetails = (displayOptions and OPTION_SHOW_DETAILS) != 0
        
        Log.d(TAG, "üìã Adding report content - Charts: $showCharts, Stats: $showStats, Details: $showDetails")
        
        // Ki·ªÉm tra c√≥ √≠t nh·∫•t m·ªôt ph·∫ßn ƒë∆∞·ª£c ch·ªçn
        if (!showCharts && !showStats && !showDetails) {
            Log.w(TAG, "‚ö†Ô∏è No content options selected, adding default message")
            try {
                val noContentMessage = Paragraph(
                    "Kh√¥ng c√≥ n·ªôi dung n√†o ƒë∆∞·ª£c ch·ªçn ƒë·ªÉ hi·ªÉn th·ªã trong b√°o c√°o.\n" +
                    "Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt trong c√°c t√πy ch·ªçn: Bi·ªÉu ƒë·ªì, Th·ªëng k√™, ho·∫∑c Chi ti·∫øt.",
                    Font(getVietnameseFont(), 12f, Font.ITALIC, BaseColor.GRAY)
                )
                noContentMessage.alignment = Element.ALIGN_CENTER
                noContentMessage.spacingBefore = 20f
                noContentMessage.spacingAfter = 20f
                document.add(noContentMessage)
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Error adding no content message: ${e.message}", e)
            }
            return
        }
        
        // Track s·ªë ph·∫ßn ƒë√£ ƒë∆∞·ª£c th√™m th√†nh c√¥ng
        var sectionsAdded = 0
        
        // Add sections based on report type
        when (reportType) {
            TYPE_EXPENSE -> {
                Log.d(TAG, "üìä Processing TYPE_EXPENSE report")
                
                // Add expense chart before expense statistics if enabled
                if (showCharts && expensePieChart != null) {
                    try {
                        Log.d(TAG, "üìà Adding expense chart...")
                        addChartToPdf(document, expensePieChart, "BI·ªÇU ƒê·ªí CHI TI√äU")
                        sectionsAdded++
                        Log.d(TAG, "‚úÖ Expense chart added successfully")
                    } catch (e: Exception) {
                        Log.e(TAG, "‚ùå Failed to add expense chart: ${e.message}", e)
                        // Chart th·∫•t b·∫°i kh√¥ng l√†m d·ª´ng vi·ªác th√™m c√°c ph·∫ßn kh√°c
                    }
                } else if (showCharts) {
                    Log.w(TAG, "‚ö†Ô∏è Charts requested but expensePieChart is null")
                }
                
                // Add expense statistics if enabled
                if (showStats) {
                    try {
                        Log.d(TAG, "üìä Adding expense statistics...")
                        addStatisticsToPdf(document, expenseData, null, TYPE_EXPENSE)
                        sectionsAdded++
                        Log.d(TAG, "‚úÖ Expense statistics added successfully")
                    } catch (e: Exception) {
                        Log.e(TAG, "‚ùå Failed to add expense statistics: ${e.message}", e)
                    }
                }
                
                // Add expense details if enabled
                if (showDetails) {
                    try {
                        Log.d(TAG, "üìã Adding expense details...")
                        addDetailsToPdf(document, expenseData, null, TYPE_EXPENSE)
                        sectionsAdded++
                        Log.d(TAG, "‚úÖ Expense details added successfully")
                    } catch (e: Exception) {
                        Log.e(TAG, "‚ùå Failed to add expense details: ${e.message}", e)
                    }
                }
            }
            
            TYPE_INCOME -> {
                Log.d(TAG, "üìä Processing TYPE_INCOME report")
                
                // Add income chart before income statistics if enabled
                if (showCharts && incomePieChart != null) {
                    try {
                        Log.d(TAG, "üìà Adding income chart...")
                        addChartToPdf(document, incomePieChart, "BI·ªÇU ƒê·ªí THU NH·∫¨P")
                        sectionsAdded++
                        Log.d(TAG, "‚úÖ Income chart added successfully")
                    } catch (e: Exception) {
                        Log.e(TAG, "‚ùå Failed to add income chart: ${e.message}", e)
                    }
                } else if (showCharts) {
                    Log.w(TAG, "‚ö†Ô∏è Charts requested but incomePieChart is null")
                }
                
                // Add income statistics if enabled
                if (showStats) {
                    try {
                        Log.d(TAG, "üìä Adding income statistics...")
                        addStatisticsToPdf(document, null, incomeData, TYPE_INCOME)
                        sectionsAdded++
                        Log.d(TAG, "‚úÖ Income statistics added successfully")
                    } catch (e: Exception) {
                        Log.e(TAG, "‚ùå Failed to add income statistics: ${e.message}", e)
                    }
                }
                
                // Add income details if enabled
                if (showDetails) {
                    try {
                        Log.d(TAG, "üìã Adding income details...")
                        addDetailsToPdf(document, null, incomeData, TYPE_INCOME)
                        sectionsAdded++
                        Log.d(TAG, "‚úÖ Income details added successfully")
                    } catch (e: Exception) {
                        Log.e(TAG, "‚ùå Failed to add income details: ${e.message}", e)
                    }
                }
            }
            
            TYPE_BOTH -> {
                Log.d(TAG, "üìä Processing TYPE_BOTH report")
                
                // 1. Th·ªëng k√™ t·ªïng quan (n·∫øu ƒë∆∞·ª£c ch·ªçn)
                if (showStats) {
                    try {
                        Log.d(TAG, "üìä Adding overview statistics...")
                        addOverviewStatistics(document, expenseData, incomeData)
                        sectionsAdded++
                        Log.d(TAG, "‚úÖ Overview statistics added successfully")
                    } catch (e: Exception) {
                        Log.e(TAG, "‚ùå Failed to add overview statistics: ${e.message}", e)
                    }
                }
                
                // 2. Ph·∫ßn chi ti√™u
                Log.d(TAG, "üìä Processing expense section for TYPE_BOTH")
                
                // 2a. Bi·ªÉu ƒë·ªì chi ti√™u
                if (showCharts && expensePieChart != null) {
                    try {
                        Log.d(TAG, "üìà Adding expense chart...")
                        val chartTitle = expensePieChart.centerText?.toString() ?: ""
                        val datePattern = "Chi ti√™u th√°ng (\\d+)/(\\d+)".toRegex()
                        val matchResult = datePattern.find(chartTitle)
                        val monthYear = if (matchResult != null) {
                            " TH√ÅNG ${matchResult.groupValues[1]}/${matchResult.groupValues[2]}"
                        } else {
                            ""
                        }
                        
                        addChartToPdf(document, expensePieChart, "BI·ªÇU ƒê·ªí CHI TI√äU$monthYear")
                        sectionsAdded++
                        Log.d(TAG, "‚úÖ Expense chart added successfully")
                    } catch (e: Exception) {
                        Log.e(TAG, "‚ùå Failed to add expense chart: ${e.message}", e)
                    }
                } else if (showCharts) {
                    Log.w(TAG, "‚ö†Ô∏è Charts requested but expensePieChart is null")
                }
                
                // 2b. Chi ti·∫øt chi ti√™u (ch·ªâ th√™m n·∫øu showDetails = true)
                if (showDetails) {
                    try {
                        Log.d(TAG, "üìã Adding expense details...")
                        addDetailsToPdf(document, expenseData, null, TYPE_EXPENSE)
                        sectionsAdded++
                        Log.d(TAG, "‚úÖ Expense details added successfully")
                    } catch (e: Exception) {
                        Log.e(TAG, "‚ùå Failed to add expense details: ${e.message}", e)
                    }
                }
                
                // 3. Ph·∫ßn thu nh·∫≠p
                Log.d(TAG, "üìä Processing income section for TYPE_BOTH")
                
                // 3a. Bi·ªÉu ƒë·ªì thu nh·∫≠p
                if (showCharts && incomePieChart != null) {
                    try {
                        Log.d(TAG, "üìà Adding income chart...")
                        val chartTitle = incomePieChart.centerText?.toString() ?: ""
                        val datePattern = "Thu nh·∫≠p th√°ng (\\d+)/(\\d+)".toRegex()
                        val matchResult = datePattern.find(chartTitle)
                        val monthYear = if (matchResult != null) {
                            " TH√ÅNG ${matchResult.groupValues[1]}/${matchResult.groupValues[2]}"
                        } else {
                            ""
                        }
                        
                        addChartToPdf(document, incomePieChart, "BI·ªÇU ƒê·ªí THU NH·∫¨P$monthYear")
                        sectionsAdded++
                        Log.d(TAG, "‚úÖ Income chart added successfully")
                    } catch (e: Exception) {
                        Log.e(TAG, "‚ùå Failed to add income chart: ${e.message}", e)
                    }
                } else if (showCharts) {
                    Log.w(TAG, "‚ö†Ô∏è Charts requested but incomePieChart is null")
                }
                
                // 3b. Chi ti·∫øt thu nh·∫≠p (ch·ªâ th√™m n·∫øu showDetails = true)
                if (showDetails) {
                    try {
                        Log.d(TAG, "üìã Adding income details...")
                        addDetailsToPdf(document, null, incomeData, TYPE_INCOME)
                        sectionsAdded++
                        Log.d(TAG, "‚úÖ Income details added successfully")
                    } catch (e: Exception) {
                        Log.e(TAG, "‚ùå Failed to add income details: ${e.message}", e)
                    }
                }
            }
        }
        
        // Ki·ªÉm tra cu·ªëi c√πng: n·∫øu kh√¥ng c√≥ ph·∫ßn n√†o ƒë∆∞·ª£c th√™m th√†nh c√¥ng
        Log.d(TAG, "üìä Total sections added: $sectionsAdded")
        if (sectionsAdded == 0) {
            Log.w(TAG, "‚ö†Ô∏è No sections were added successfully, adding fallback content")
            try {
                val fallbackMessage = Paragraph(
                    "Kh√¥ng th·ªÉ t·∫°o n·ªôi dung b√°o c√°o.\n" +
                    "C√≥ th·ªÉ do kh√¥ng c√≥ d·ªØ li·ªáu trong kho·∫£ng th·ªùi gian ƒë√£ ch·ªçn ho·∫∑c x·∫£y ra l·ªói k·ªπ thu·∫≠t.\n" +
                    "Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c ch·ªçn kho·∫£ng th·ªùi gian kh√°c.",
                    Font(getVietnameseFont(), 12f, Font.NORMAL, BaseColor.GRAY)
                )
                fallbackMessage.alignment = Element.ALIGN_CENTER
                fallbackMessage.spacingBefore = 20f
                fallbackMessage.spacingAfter = 20f
                document.add(fallbackMessage)
                Log.d(TAG, "‚úÖ Fallback content added")
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Failed to add fallback content: ${e.message}", e)
                // Th√™m n·ªôi dung t·ªëi thi·ªÉu ƒë·ªÉ ƒë·∫£m b·∫£o PDF kh√¥ng r·ªóng
                try {
                    document.add(Paragraph("B√°o c√°o kh√¥ng c√≥ n·ªôi dung"))
                } catch (e2: Exception) {
                    Log.e(TAG, "‚ùå Even minimal content failed: ${e2.message}", e2)
                }
            }
        }
    }
    
    /**
     * Add overview statistics including total expense, income and balance
     */
    private fun addOverviewStatistics(
        document: Document,
        expenseData: List<CategoryExpenseDetail>?,
        incomeData: List<CategoryIncomeDetail>?
    ) {
        try {
            // S·ª≠ d·ª•ng font cho th·ªëng k√™
            val baseFont = getVietnameseFont()
            val boldFont = getVietnameseBoldFont()
            val mediumFont = getVietnameseMediumFont()
            
            // T·∫°o font tr·ª±c ti·∫øp khi c·∫ßn s·ª≠ d·ª•ng
            val contentFont = Font(baseFont, 12f, Font.NORMAL, BaseColor.BLACK)
            val highlightFont = Font(mediumFont, 12f, Font.NORMAL, BaseColor(255, 128, 0))
            
            // Add section title - ƒê·∫£m b·∫£o d·∫•u ti·∫øng Vi·ªát hi·ªÉn th·ªã ƒë·∫ßy ƒë·ªß
            // T·∫°o font tr·ª±c ti·∫øp ƒë·ªÉ ƒë·∫£m b·∫£o encoding Unicode
            val sectionTitle = Paragraph("TH·ªêNG K√ä T·ªîNG QUAN", 
                Font(boldFont, 14f, Font.NORMAL, BaseColor(90, 90, 90)))
            sectionTitle.spacingBefore = 15f
            sectionTitle.spacingAfter = 10f
            document.add(sectionTitle)
            
            // Create table for statistics
            val table = PdfPTable(2)
            table.widthPercentage = 100f
            table.setWidths(floatArrayOf(6f, 4f))
            
            // Add table headers - ƒê·∫£m b·∫£o d·∫•u ti·∫øng Vi·ªát hi·ªÉn th·ªã ƒë·∫ßy ƒë·ªß
            addTableHeaderCell(table, "Th√¥ng tin", boldFont)
            addTableHeaderCell(table, "S·ªë ti·ªÅn (VND)", boldFont)
            
            // Calculate and add total values
            val totalExpense = expenseData?.sumOf { it.totalAmount } ?: 0
            val totalIncome = incomeData?.sumOf { it.totalAmount } ?: 0
            
            // Add expense row - ƒê·∫£m b·∫£o d·∫•u ti·∫øng Vi·ªát hi·ªÉn th·ªã ƒë·∫ßy ƒë·ªß
            val expenseCell = PdfPCell(
                Phrase("T·ªïng chi ti√™u", 
                    Font(baseFont, 12f, Font.NORMAL, BaseColor.BLACK))
            )
            expenseCell.paddingLeft = 10f
            expenseCell.paddingTop = 8f
            expenseCell.paddingBottom = 8f
            expenseCell.borderColor = BaseColor(240, 240, 240)
            table.addCell(expenseCell)
            
            val expenseValueCell = PdfPCell(
                Phrase(formatter.format(totalExpense), 
                    Font(mediumFont, 12f, Font.NORMAL, BaseColor(255, 128, 0)))
            )
            expenseValueCell.horizontalAlignment = Element.ALIGN_RIGHT
            expenseValueCell.paddingRight = 10f
            expenseValueCell.paddingTop = 8f
            expenseValueCell.paddingBottom = 8f
            expenseValueCell.borderColor = BaseColor(240, 240, 240)
            table.addCell(expenseValueCell)
            
            // Add income row - ƒê·∫£m b·∫£o d·∫•u ti·∫øng Vi·ªát hi·ªÉn th·ªã ƒë·∫ßy ƒë·ªß
            val incomeCell = PdfPCell(
                Phrase("T·ªïng thu nh·∫≠p", 
                    Font(baseFont, 12f, Font.NORMAL, BaseColor.BLACK))
            )
            incomeCell.paddingLeft = 10f
            incomeCell.paddingTop = 8f
            incomeCell.paddingBottom = 8f
            incomeCell.borderColor = BaseColor(240, 240, 240)
            table.addCell(incomeCell)
            
            val incomeValueCell = PdfPCell(
                Phrase(formatter.format(totalIncome), 
                    Font(mediumFont, 12f, Font.NORMAL, BaseColor(255, 128, 0)))
            )
            incomeValueCell.horizontalAlignment = Element.ALIGN_RIGHT
            incomeValueCell.paddingRight = 10f
            incomeValueCell.paddingTop = 8f
            incomeValueCell.paddingBottom = 8f
            incomeValueCell.borderColor = BaseColor(240, 240, 240)
            table.addCell(incomeValueCell)
            
            // Add balance row - ƒê·∫£m b·∫£o d·∫•u ti·∫øng Vi·ªát hi·ªÉn th·ªã ƒë·∫ßy ƒë·ªß
            val balance = totalIncome - totalExpense
            
            val balanceCell = PdfPCell(
                Phrase("S·ªë d∆∞", 
                    Font(boldFont, 12f, Font.NORMAL, BaseColor.BLACK))
            )
            balanceCell.paddingLeft = 10f
            balanceCell.paddingTop = 8f
            balanceCell.paddingBottom = 8f
            balanceCell.borderColor = BaseColor(240, 240, 240)
            table.addCell(balanceCell)
            
            val balanceColor = if (balance >= 0) BaseColor(0, 150, 0) else BaseColor(200, 0, 0)
            val balanceValueCell = PdfPCell(
                Phrase(formatter.format(balance), 
                    Font(boldFont, 12f, Font.NORMAL, balanceColor))
            )
            balanceValueCell.horizontalAlignment = Element.ALIGN_RIGHT
            balanceValueCell.paddingRight = 10f
            balanceValueCell.paddingTop = 8f
            balanceValueCell.paddingBottom = 8f
            balanceValueCell.borderColor = BaseColor(240, 240, 240)
            table.addCell(balanceValueCell)
            
            document.add(table)
        } catch (e: Exception) {
            Log.e(TAG, "Error adding overview statistics: ${e.message}", e)
        }
    }
    
    private fun addDocumentHeader(
        document: Document,
        startDate: LocalDate,
        endDate: LocalDate,
        reportType: Int
    ) {
        try {
            // S·ª≠ d·ª•ng font Montserrat cho m·ªçi th√†nh ph·∫ßn vƒÉn b·∫£n
            val baseFont = getVietnameseFont()
            val boldFont = getVietnameseBoldFont()
            val mediumFont = getVietnameseMediumFont()
            val italicFont = getVietnameseItalicFont()
            
            // Add title - T·∫°o font tr·ª±c ti·∫øp cho t·ª´ng tr∆∞·ªùng h·ª£p s·ª≠ d·ª•ng
            val title = when (reportType) {
                TYPE_EXPENSE -> "B√ÅO C√ÅO CHI TI√äU"
                TYPE_INCOME -> "B√ÅO C√ÅO THU NH·∫¨P"
                else -> "B√ÅO C√ÅO THU CHI"
            }
            
            // T·∫°o font tr·ª±c ti·∫øp ƒë·ªÉ ƒë·∫£m b·∫£o encoding Unicode ƒë√∫ng
            val titleParagraph = Paragraph(title, 
                Font(boldFont, 18f, Font.NORMAL, BaseColor(51, 51, 51)))
            titleParagraph.alignment = Element.ALIGN_CENTER
            titleParagraph.spacingAfter = 5f
            document.add(titleParagraph)
            
            // Add date range - T·∫°o chu·ªói v·ªõi font tr·ª±c ti·∫øp
            val formattedStartDate = startDate.format(dateFormatter)
            val formattedEndDate = endDate.format(dateFormatter)
            
            val dateRange = "T·ª´ $formattedStartDate ƒë·∫øn $formattedEndDate"
            // T·∫°o font tr·ª±c ti·∫øp ƒë·ªÉ ƒë·∫£m b·∫£o encoding Unicode ƒë√∫ng
            val dateRangeParagraph = Paragraph(dateRange, 
                Font(italicFont, 10f, Font.NORMAL, BaseColor(153, 153, 153)))
            dateRangeParagraph.alignment = Element.ALIGN_CENTER
            dateRangeParagraph.spacingAfter = 20f
            document.add(dateRangeParagraph)
            
            // Add separator line
            val line = LineSeparator()
            line.lineWidth = 1f
            line.percentage = 100f
            line.lineColor = BaseColor(230, 230, 230)
            document.add(Chunk(line))
            
            // Add intro paragraph - t·∫°o v·ªõi font tr·ª±c ti·∫øp
            val intro = "B√°o c√°o n√†y th·ªëng k√™ c√°c th√¥ng tin t√†i ch√≠nh trong kho·∫£ng th·ªùi gian ƒë√£ ch·ªçn."
            // T·∫°o font tr·ª±c ti·∫øp ƒë·ªÉ ƒë·∫£m b·∫£o encoding Unicode ƒë√∫ng
            val introParagraph = Paragraph(intro, 
                Font(baseFont, 12f, Font.NORMAL, BaseColor(102, 102, 102)))
            introParagraph.alignment = Element.ALIGN_LEFT
            introParagraph.spacingBefore = 10f
            introParagraph.spacingAfter = 15f
            document.add(introParagraph)
        } catch (e: Exception) {
            Log.e(TAG, "Error adding document header", e)
        }
    }
    
    private fun addChartToPdf(document: Document, chart: PieChart, title: String) {
        try {
            Log.d(TAG, "üìä Starting to add chart to PDF: '$title'")
            Log.d(TAG, "üìè Chart dimensions: width=${chart.width}, height=${chart.height}")
            
            // T·∫°o font tr·ª±c ti·∫øp ƒë·ªÉ ƒë·∫£m b·∫£o encoding Unicode cho ti√™u ƒë·ªÅ bi·ªÉu ƒë·ªì
            Log.d(TAG, "üî§ Creating chart title with font...")
            val boldFont = getVietnameseBoldFont()
            val chartTitle = Paragraph(title, 
                Font(boldFont, 16f, Font.NORMAL, BaseColor(51, 51, 51)))
            chartTitle.alignment = Element.ALIGN_CENTER
            chartTitle.spacingBefore = 20f
            chartTitle.spacingAfter = 15f
            document.add(chartTitle)
            Log.d(TAG, "‚úÖ Chart title added successfully")
            
            // Ki·ªÉm tra chart data
            if (chart.data == null) {
                Log.w(TAG, "‚ö†Ô∏è Chart data is null!")
                throw Exception("Chart data is null")
            }
            
            val totalValue = chart.data.yValueSum
            val entryCount = chart.data.entryCount
            Log.d(TAG, "üìà Chart data: totalValue=$totalValue, entryCount=$entryCount")
            
            if (totalValue <= 0 || entryCount <= 0) {
                Log.w(TAG, "‚ö†Ô∏è Chart has no valid data!")
                throw Exception("Chart has no valid data (totalValue=$totalValue, entryCount=$entryCount)")
            }
            
            // ƒê·∫£m b·∫£o chart ƒë√£ ƒë∆∞·ª£c render v√† t√≠nh to√°n ƒë·∫ßy ƒë·ªß
            Log.d(TAG, "üîÑ Preparing chart for rendering...")
            chart.calculateOffsets()
            chart.notifyDataSetChanged()
            chart.invalidate()
            
            // ƒê·ª£i m·ªôt ch√∫t ƒë·ªÉ chart render xong
            try {
                Thread.sleep(300) // TƒÉng th·ªùi gian ch·ªù
            } catch (e: InterruptedException) {
                Thread.currentThread().interrupt()
            }
            
            // Ki·ªÉm tra k√≠ch th∆∞·ªõc chart sau khi prepare
            Log.d(TAG, "üìè Chart dimensions after prepare: width=${chart.width}, height=${chart.height}")
            
            // T·∫°o bitmap t·ª´ chart v·ªõi ch·∫•t l∆∞·ª£ng cao
            Log.d(TAG, "üñºÔ∏è Creating bitmap from chart...")
            val bitmap = getBitmapFromView(chart)
            
            if (bitmap.isRecycled) {
                throw Exception("Generated bitmap is recycled")
            }
            
            Log.d(TAG, "‚úÖ Bitmap created: ${bitmap.width}x${bitmap.height}, config=${bitmap.config}")
            
            // Convert bitmap to Image v·ªõi ch·∫•t l∆∞·ª£ng t·ªëi ∆∞u
            Log.d(TAG, "üì¶ Converting bitmap to PDF image...")
            val stream = ByteArrayOutputStream()
            val compressed = bitmap.compress(Bitmap.CompressFormat.PNG, 95, stream)
            
            if (!compressed) {
                throw Exception("Failed to compress bitmap to PNG")
            }
            
            val byteArray = stream.toByteArray()
            Log.d(TAG, "üì¶ Bitmap compressed to ${byteArray.size} bytes")
            
            if (byteArray.isEmpty()) {
                throw Exception("Compressed bitmap is empty")
            }
            
            val image = Image.getInstance(byteArray)
            Log.d(TAG, "‚úÖ PDF Image created: ${image.width}x${image.height}")
            
            // Scale image ƒë·ªÉ fit trang v·ªõi t·ª∑ l·ªá t·ªëi ∆∞u
            val pageWidth = document.pageSize.width - document.leftMargin() - document.rightMargin()
            val maxImageWidth = pageWidth * 0.8f  // S·ª≠ d·ª•ng 80% chi·ªÅu r·ªông trang
            val maxImageHeight = pageWidth * 0.6f  // T·ª∑ l·ªá 4:3
            
            Log.d(TAG, "üìê Scaling image: pageWidth=$pageWidth, maxWidth=$maxImageWidth, maxHeight=$maxImageHeight")
            
            image.scaleToFit(maxImageWidth, maxImageHeight)
            image.alignment = Element.ALIGN_CENTER
            
            Log.d(TAG, "üìê Image scaled to: ${image.scaledWidth}x${image.scaledHeight}")
            
            // Th√™m kho·∫£ng tr·ªëng v√† image
            document.add(Paragraph("\n"))
            document.add(image)
            document.add(Paragraph("\n"))
            
            Log.d(TAG, "‚úÖ Chart added to PDF successfully with dimensions: ${image.scaledWidth}x${image.scaledHeight}")
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Error adding chart to PDF: ${e.message}", e)
            Log.e(TAG, "‚ùå Exception type: ${e.javaClass.simpleName}")
            Log.e(TAG, "‚ùå Stack trace: ${e.stackTrace.take(5).joinToString("\n") { "  at $it" }}")
            
            // Th√™m th√¥ng b√°o l·ªói chi ti·∫øt v√†o PDF
            try {
                Log.d(TAG, "üìù Adding error message to PDF...")
                val errorMessage = "Kh√¥ng th·ªÉ hi·ªÉn th·ªã bi·ªÉu ƒë·ªì.\nL·ªói: ${e.javaClass.simpleName}\nChi ti·∫øt: ${e.message}"
                val errorParagraph = Paragraph(errorMessage, 
                    Font(getVietnameseFont(), 11f, Font.ITALIC, BaseColor.RED))
                errorParagraph.alignment = Element.ALIGN_CENTER
                errorParagraph.spacingBefore = 10f
                errorParagraph.spacingAfter = 10f
                document.add(errorParagraph)
                Log.d(TAG, "‚úÖ Error message added to PDF")
            } catch (e2: Exception) {
                Log.e(TAG, "‚ùå Error adding error message to PDF: ${e2.message}", e2)
                // Fallback: th√™m text ƒë∆°n gi·∫£n
                try {
                    document.add(Paragraph("L·ªói hi·ªÉn th·ªã bi·ªÉu ƒë·ªì"))
                } catch (e3: Exception) {
                    Log.e(TAG, "‚ùå Even fallback error message failed: ${e3.message}", e3)
                }
            }
        }
    }
    
    private fun getBitmapFromView(view: PieChart): Bitmap {
        try {
            Log.d(TAG, "üñºÔ∏è Creating bitmap from chart with dimensions: ${view.width}x${view.height}")
            
            // K√≠ch th∆∞·ªõc t·ªëi ∆∞u cho bi·ªÉu ƒë·ªì PDF (ƒë·ªß l·ªõn ƒë·ªÉ hi·ªÉn th·ªã r√µ r√†ng)
            val OPTIMAL_WIDTH = 1200
            val OPTIMAL_HEIGHT = 1200
            
            // Ki·ªÉm tra view c√≥ h·ª£p l·ªá kh√¥ng
            if (view.data == null) {
                throw Exception("Chart data is null")
            }
            
            if (view.data.entryCount <= 0) {
                throw Exception("Chart has no data entries")
            }
            
            // ƒê·∫£m b·∫£o view c√≥ k√≠ch th∆∞·ªõc h·ª£p l√Ω
            if (view.width <= 0 || view.height <= 0) {
                Log.d(TAG, "üìè Chart has no dimensions, setting to optimal size")
                
                view.measure(
                    View.MeasureSpec.makeMeasureSpec(OPTIMAL_WIDTH, View.MeasureSpec.EXACTLY),
                    View.MeasureSpec.makeMeasureSpec(OPTIMAL_HEIGHT, View.MeasureSpec.EXACTLY)
                )
                view.layout(0, 0, OPTIMAL_WIDTH, OPTIMAL_HEIGHT)
                
                Log.d(TAG, "üìè Chart dimensions after layout: ${view.width}x${view.height}")
            }
            
            // Ki·ªÉm tra l·∫°i sau khi layout
            if (view.width <= 0 || view.height <= 0) {
                throw Exception("Chart still has invalid dimensions after layout: ${view.width}x${view.height}")
            }
            
            // S·ª≠ d·ª•ng k√≠ch th∆∞·ªõc t·ªëi ∆∞u ƒë·ªÉ ƒë·∫£m b·∫£o ch·∫•t l∆∞·ª£ng bitmap
            val finalWidth = Math.max(view.width, OPTIMAL_WIDTH)
            val finalHeight = Math.max(view.height, OPTIMAL_HEIGHT)
            
            Log.d(TAG, "üñºÔ∏è Creating bitmap with optimal dimensions: ${finalWidth}x${finalHeight}")
            
            // Ki·ªÉm tra memory c√≥ ƒë·ªß kh√¥ng
            val bytesNeeded = finalWidth * finalHeight * 4 // ARGB_8888 = 4 bytes per pixel
            val maxMemory = Runtime.getRuntime().maxMemory()
            val usedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory()
            val availableMemory = maxMemory - usedMemory
            
            Log.d(TAG, "üíæ Memory check: need=${bytesNeeded/1024/1024}MB, available=${availableMemory/1024/1024}MB")
            
            if (bytesNeeded > availableMemory * 0.8) { // Ch·ªâ d√πng 80% memory available
                Log.w(TAG, "‚ö†Ô∏è Not enough memory, reducing bitmap size")
                val scale = Math.sqrt((availableMemory * 0.8) / bytesNeeded)
                val reducedWidth = (finalWidth * scale).toInt()
                val reducedHeight = (finalHeight * scale).toInt()
                Log.d(TAG, "üìâ Reduced bitmap size to: ${reducedWidth}x${reducedHeight}")
                return createBitmapWithSize(view, reducedWidth, reducedHeight)
            }
            
            // T·∫°o bitmap v·ªõi ch·∫•t l∆∞·ª£ng cao
            val returnedBitmap = Bitmap.createBitmap(
                finalWidth,
                finalHeight,
                Bitmap.Config.ARGB_8888
            )
            
            Log.d(TAG, "‚úÖ Bitmap created successfully: ${returnedBitmap.width}x${returnedBitmap.height}")
            
            // T·∫°o canvas v√† v·∫Ω view l√™n bitmap
            val canvas = Canvas(returnedBitmap)
            canvas.drawColor(Color.WHITE) // ƒê·∫£m b·∫£o n·ªÅn tr·∫Øng
            
            Log.d(TAG, "üé® Drawing chart on canvas...")
            
            // N·∫øu view nh·ªè h∆°n bitmap, scale ƒë·ªÉ fit
            if (view.width < finalWidth || view.height < finalHeight) {
                val scaleX = finalWidth.toFloat() / view.width
                val scaleY = finalHeight.toFloat() / view.height
                val scale = Math.min(scaleX, scaleY)
                
                Log.d(TAG, "üìê Scaling chart: scaleX=$scaleX, scaleY=$scaleY, finalScale=$scale")
                
                canvas.save()
                canvas.scale(scale, scale)
                
                // Center the chart
                val translateX = (finalWidth / scale - view.width) / 2
                val translateY = (finalHeight / scale - view.height) / 2
                canvas.translate(translateX, translateY)
                
                Log.d(TAG, "üìç Translating chart: translateX=$translateX, translateY=$translateY")
                
                view.draw(canvas)
                canvas.restore()
            } else {
                view.draw(canvas)
            }
            
            Log.d(TAG, "‚úÖ Chart rendered to bitmap successfully with dimensions: ${returnedBitmap.width}x${returnedBitmap.height}")
            
            // Ki·ªÉm tra bitmap c√≥ h·ª£p l·ªá kh√¥ng
            if (returnedBitmap.isRecycled) {
                throw Exception("Generated bitmap is recycled")
            }
            
            return returnedBitmap
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Error creating bitmap from chart: ${e.message}", e)
            Log.e(TAG, "‚ùå Exception type: ${e.javaClass.simpleName}")
            
            // N·∫øu c√≥ l·ªói, t·∫°o m·ªôt bitmap ƒë∆°n gi·∫£n v·ªõi th√¥ng b√°o l·ªói
            return createFallbackBitmap(e.message ?: "Unknown error")
        }
    }
    
    private fun createBitmapWithSize(view: PieChart, width: Int, height: Int): Bitmap {
        val bitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888)
        val canvas = Canvas(bitmap)
        canvas.drawColor(Color.WHITE)
        
        val scaleX = width.toFloat() / view.width
        val scaleY = height.toFloat() / view.height
        val scale = Math.min(scaleX, scaleY)
        
        canvas.save()
        canvas.scale(scale, scale)
        
        val translateX = (width / scale - view.width) / 2
        val translateY = (height / scale - view.height) / 2
        canvas.translate(translateX, translateY)
        
        view.draw(canvas)
        canvas.restore()
        
        return bitmap
    }
    
    private fun createFallbackBitmap(errorMessage: String): Bitmap {
        try {
            val width = 800
            val height = 600
            val bitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888)
            val canvas = Canvas(bitmap)
            canvas.drawColor(Color.WHITE)
            
            val paint = android.graphics.Paint().apply {
                color = Color.RED
                textSize = 32f
                isAntiAlias = true
                textAlign = android.graphics.Paint.Align.CENTER
            }
            
            // V·∫Ω nhi·ªÅu d√≤ng text
            val lines = listOf(
                "Kh√¥ng th·ªÉ hi·ªÉn th·ªã bi·ªÉu ƒë·ªì",
                "L·ªói: $errorMessage"
            )
            
            val lineHeight = paint.textSize * 1.2f
            val startY = height / 2f - (lines.size - 1) * lineHeight / 2f
            
            lines.forEachIndexed { index, line ->
                canvas.drawText(line, width / 2f, startY + index * lineHeight, paint)
            }
            
            Log.d(TAG, "‚úÖ Fallback bitmap created with error message")
            return bitmap
        } catch (e2: Exception) {
            Log.e(TAG, "‚ùå Failed to create fallback bitmap: ${e2.message}", e2)
            // T·∫°o bitmap t·ªëi thi·ªÉu
            return Bitmap.createBitmap(100, 100, Bitmap.Config.ARGB_8888).apply {
                eraseColor(Color.WHITE)
            }
        }
    }
    
    private fun addStatisticsToPdf(
        document: Document,
        expenseData: List<CategoryExpenseDetail>?,
        incomeData: List<CategoryIncomeDetail>?,
        reportType: Int
    ) {
        try {
            Log.d(TAG, "üìä Adding statistics for reportType: $reportType")
            
            // Ki·ªÉm tra c√≥ d·ªØ li·ªáu kh√¥ng
            val hasExpenseData = !expenseData.isNullOrEmpty()
            val hasIncomeData = !incomeData.isNullOrEmpty()
            
            Log.d(TAG, "üìä Data availability - Expense: $hasExpenseData, Income: $hasIncomeData")
            
            // N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu n√†o, v·∫´n hi·ªÉn th·ªã th·ªëng k√™ v·ªõi gi√° tr·ªã 0
            if (!hasExpenseData && !hasIncomeData && reportType == TYPE_BOTH) {
                Log.d(TAG, "üìä No data available, showing zero statistics")
            }
            
            // S·ª≠ d·ª•ng font cho th·ªëng k√™
            val baseFont = getVietnameseFont()
            val boldFont = getVietnameseBoldFont()
            val mediumFont = getVietnameseMediumFont()
            
            // T·∫°o font tr·ª±c ti·∫øp khi c·∫ßn s·ª≠ d·ª•ng
            val contentFont = Font(baseFont, 12f, Font.NORMAL, BaseColor.BLACK)
            val highlightFont = Font(mediumFont, 12f, Font.NORMAL, BaseColor(255, 128, 0))
            
            // Add section title v·ªõi font t·∫°o tr·ª±c ti·∫øp ƒë·ªÉ ƒë·∫£m b·∫£o Unicode
            val sectionTitle = when (reportType) {
                TYPE_EXPENSE -> Paragraph("TH·ªêNG K√ä CHI TI√äU", 
                    Font(boldFont, 14f, Font.NORMAL, BaseColor(90, 90, 90)))
                TYPE_INCOME -> Paragraph("TH·ªêNG K√ä THU NH·∫¨P", 
                    Font(boldFont, 14f, Font.NORMAL, BaseColor(90, 90, 90)))
                else -> Paragraph("TH·ªêNG K√ä T·ªîNG QUAN", 
                    Font(boldFont, 14f, Font.NORMAL, BaseColor(90, 90, 90)))
            }
            sectionTitle.spacingBefore = 15f
            sectionTitle.spacingAfter = 10f
            document.add(sectionTitle)
            
            // Create table for statistics
            val table = PdfPTable(2)
            table.widthPercentage = 100f
            table.setWidths(floatArrayOf(6f, 4f))
            
            // Add table headers - ƒê·∫£m b·∫£o d·∫•u ti·∫øng Vi·ªát hi·ªÉn th·ªã ƒë·∫ßy ƒë·ªß
            addTableHeaderCell(table, "Th√¥ng tin", boldFont)
            addTableHeaderCell(table, "S·ªë ti·ªÅn (VND)", boldFont)
            
            // Add relevant statistics based on report type
            if (reportType == TYPE_EXPENSE) {
                val totalExpense = expenseData?.sumOf { it.totalAmount } ?: 0
                Log.d(TAG, "üìä Expense total: $totalExpense")
                
                // Add expense row - ƒê·∫£m b·∫£o d·∫•u ti·∫øng Vi·ªát hi·ªÉn th·ªã ƒë·∫ßy ƒë·ªß
                val expenseCell = PdfPCell(
                    Phrase("T·ªïng chi ti√™u", 
                        Font(baseFont, 12f, Font.NORMAL, BaseColor.BLACK))
                )
                expenseCell.paddingLeft = 10f
                expenseCell.paddingTop = 8f
                expenseCell.paddingBottom = 8f
                expenseCell.borderColor = BaseColor(240, 240, 240)
                table.addCell(expenseCell)
                
                val expenseValueCell = PdfPCell(
                    Phrase(formatter.format(totalExpense), 
                        Font(mediumFont, 12f, Font.NORMAL, BaseColor(255, 128, 0)))
                )
                expenseValueCell.horizontalAlignment = Element.ALIGN_RIGHT
                expenseValueCell.paddingRight = 10f
                expenseValueCell.paddingTop = 8f
                expenseValueCell.paddingBottom = 8f
                expenseValueCell.borderColor = BaseColor(240, 240, 240)
                table.addCell(expenseValueCell)
                
                // Th√™m th√¥ng tin v·ªÅ s·ªë l∆∞·ª£ng giao d·ªãch n·∫øu c√≥ d·ªØ li·ªáu
                if (hasExpenseData) {
                    val transactionCount = expenseData?.sumOf { it.listExpense?.size ?: 0 } ?: 0
                    Log.d(TAG, "üìä Expense transaction count: $transactionCount")
                    
                    val countCell = PdfPCell(
                        Phrase("S·ªë giao d·ªãch chi ti√™u", 
                            Font(baseFont, 12f, Font.NORMAL, BaseColor.BLACK))
                    )
                    countCell.paddingLeft = 10f
                    countCell.paddingTop = 8f
                    countCell.paddingBottom = 8f
                    countCell.borderColor = BaseColor(240, 240, 240)
                    table.addCell(countCell)
                    
                    val countValueCell = PdfPCell(
                        Phrase("$transactionCount giao d·ªãch", 
                            Font(baseFont, 12f, Font.NORMAL, BaseColor.BLACK))
                    )
                    countValueCell.horizontalAlignment = Element.ALIGN_RIGHT
                    countValueCell.paddingRight = 10f
                    countValueCell.paddingTop = 8f
                    countValueCell.paddingBottom = 8f
                    countValueCell.borderColor = BaseColor(240, 240, 240)
                    table.addCell(countValueCell)
                } else {
                    // Th√™m th√¥ng b√°o kh√¥ng c√≥ d·ªØ li·ªáu
                    val noDataCell = PdfPCell(
                        Phrase("Tr·∫°ng th√°i d·ªØ li·ªáu", 
                            Font(baseFont, 12f, Font.NORMAL, BaseColor.BLACK))
                    )
                    noDataCell.paddingLeft = 10f
                    noDataCell.paddingTop = 8f
                    noDataCell.paddingBottom = 8f
                    noDataCell.borderColor = BaseColor(240, 240, 240)
                    table.addCell(noDataCell)
                    
                    val noDataValueCell = PdfPCell(
                        Phrase("Kh√¥ng c√≥ d·ªØ li·ªáu chi ti√™u", 
                            Font(baseFont, 12f, Font.ITALIC, BaseColor.GRAY))
                    )
                    noDataValueCell.horizontalAlignment = Element.ALIGN_RIGHT
                    noDataValueCell.paddingRight = 10f
                    noDataValueCell.paddingTop = 8f
                    noDataValueCell.paddingBottom = 8f
                    noDataValueCell.borderColor = BaseColor(240, 240, 240)
                    table.addCell(noDataValueCell)
                }
            } else if (reportType == TYPE_INCOME) {
                val totalIncome = incomeData?.sumOf { it.totalAmount } ?: 0
                Log.d(TAG, "üìä Income total: $totalIncome")
                
                // Add income row - ƒê·∫£m b·∫£o d·∫•u ti·∫øng Vi·ªát hi·ªÉn th·ªã ƒë·∫ßy ƒë·ªß
                val incomeCell = PdfPCell(
                    Phrase("T·ªïng thu nh·∫≠p", 
                        Font(baseFont, 12f, Font.NORMAL, BaseColor.BLACK))
                )
                incomeCell.paddingLeft = 10f
                incomeCell.paddingTop = 8f
                incomeCell.paddingBottom = 8f
                incomeCell.borderColor = BaseColor(240, 240, 240)
                table.addCell(incomeCell)
                
                val incomeValueCell = PdfPCell(
                    Phrase(formatter.format(totalIncome), 
                        Font(mediumFont, 12f, Font.NORMAL, BaseColor(255, 128, 0)))
                )
                incomeValueCell.horizontalAlignment = Element.ALIGN_RIGHT
                incomeValueCell.paddingRight = 10f
                incomeValueCell.paddingTop = 8f
                incomeValueCell.paddingBottom = 8f
                incomeValueCell.borderColor = BaseColor(240, 240, 240)
                table.addCell(incomeValueCell)
                
                // Th√™m th√¥ng tin v·ªÅ s·ªë l∆∞·ª£ng giao d·ªãch n·∫øu c√≥ d·ªØ li·ªáu
                if (hasIncomeData) {
                    val transactionCount = incomeData?.sumOf { it.listIncome?.size ?: 0 } ?: 0
                    Log.d(TAG, "üìä Income transaction count: $transactionCount")
                    
                    val countCell = PdfPCell(
                        Phrase("S·ªë giao d·ªãch thu nh·∫≠p", 
                            Font(baseFont, 12f, Font.NORMAL, BaseColor.BLACK))
                    )
                    countCell.paddingLeft = 10f
                    countCell.paddingTop = 8f
                    countCell.paddingBottom = 8f
                    countCell.borderColor = BaseColor(240, 240, 240)
                    table.addCell(countCell)
                    
                    val countValueCell = PdfPCell(
                        Phrase("$transactionCount giao d·ªãch", 
                            Font(baseFont, 12f, Font.NORMAL, BaseColor.BLACK))
                    )
                    countValueCell.horizontalAlignment = Element.ALIGN_RIGHT
                    countValueCell.paddingRight = 10f
                    countValueCell.paddingTop = 8f
                    countValueCell.paddingBottom = 8f
                    countValueCell.borderColor = BaseColor(240, 240, 240)
                    table.addCell(countValueCell)
                } else {
                    // Th√™m th√¥ng b√°o kh√¥ng c√≥ d·ªØ li·ªáu
                    val noDataCell = PdfPCell(
                        Phrase("Tr·∫°ng th√°i d·ªØ li·ªáu", 
                            Font(baseFont, 12f, Font.NORMAL, BaseColor.BLACK))
                    )
                    noDataCell.paddingLeft = 10f
                    noDataCell.paddingTop = 8f
                    noDataCell.paddingBottom = 8f
                    noDataCell.borderColor = BaseColor(240, 240, 240)
                    table.addCell(noDataCell)
                    
                    val noDataValueCell = PdfPCell(
                        Phrase("Kh√¥ng c√≥ d·ªØ li·ªáu thu nh·∫≠p", 
                            Font(baseFont, 12f, Font.ITALIC, BaseColor.GRAY))
                    )
                    noDataValueCell.horizontalAlignment = Element.ALIGN_RIGHT
                    noDataValueCell.paddingRight = 10f
                    noDataValueCell.paddingTop = 8f
                    noDataValueCell.paddingBottom = 8f
                    noDataValueCell.borderColor = BaseColor(240, 240, 240)
                    table.addCell(noDataValueCell)
                }
            }
            
            document.add(table)
        } catch (e: Exception) {
            Log.e(TAG, "Error adding statistics: ${e.message}", e)
        }
    }
    
    private fun addDetailsToPdf(
        document: Document,
        expenseData: List<CategoryExpenseDetail>?,
        incomeData: List<CategoryIncomeDetail>?,
        reportType: Int
    ) {
        try {
            Log.d(TAG, "üìã Adding details for reportType: $reportType")
            
            // Ki·ªÉm tra c√≥ d·ªØ li·ªáu kh√¥ng
            val hasExpenseData = !expenseData.isNullOrEmpty()
            val hasIncomeData = !incomeData.isNullOrEmpty()
            
            Log.d(TAG, "üìã Data availability - Expense: $hasExpenseData, Income: $hasIncomeData")
            
            // S·ª≠ d·ª•ng font cho chi ti·∫øt
            val baseFont = getVietnameseFont()
            val boldFont = getVietnameseBoldFont()
            val mediumFont = getVietnameseMediumFont()
            
            // Kh√¥ng t·∫°o sectionTitleFont ƒë·ªÉ tr√°nh l·ªói encoding
            val contentFont = Font(baseFont, 10f, Font.NORMAL, BaseColor.BLACK)
            
            // Add Expense Details if needed
            if (reportType == TYPE_EXPENSE || reportType == TYPE_BOTH) {
                Log.d(TAG, "üìã Processing expense details section")
                
                if (hasExpenseData) {
                    Log.d(TAG, "üìã Adding expense details with data")
                } else {
                    Log.d(TAG, "üìã Adding expense details without data (showing empty state)")
                }
                // T·∫°o font tr·ª±c ti·∫øp ƒë·ªÉ ƒë·∫£m b·∫£o encoding Unicode ƒë√∫ng
                val expenseTitle = Paragraph("\nCHI TI·∫æT CHI TI√äU THEO DANH M·ª§C",
                    Font(boldFont, 14f, Font.NORMAL, BaseColor(90, 90, 90)))
                expenseTitle.spacingBefore = 20f
                expenseTitle.spacingAfter = 10f
                document.add(expenseTitle)
                
                if (hasExpenseData) {
                    // Add expense categories summary table
                    val categoryTable = PdfPTable(3)
                    categoryTable.widthPercentage = 100f
                    categoryTable.setWidths(floatArrayOf(1f, 5f, 3f))
                    
                    addTableHeaderCell(categoryTable, "STT", boldFont)
                    addTableHeaderCell(categoryTable, "Danh m·ª•c", boldFont)
                    addTableHeaderCell(categoryTable, "T·ªïng chi (VND)", boldFont)
                    
                    // Add category rows
                    expenseData!!.forEachIndexed { index, category ->
                        // STT column
                        val indexCell = PdfPCell(Phrase((index + 1).toString(), contentFont))
                        indexCell.horizontalAlignment = Element.ALIGN_CENTER
                        indexCell.paddingTop = 6f
                        indexCell.paddingBottom = 6f
                        indexCell.borderColor = BaseColor(240, 240, 240)
                        categoryTable.addCell(indexCell)
                        
                        // Category name column
                        val categoryCell = PdfPCell(Phrase(category.category?.title ?: "Kh√¥ng t√™n", contentFont))
                        categoryCell.paddingLeft = 10f
                        categoryCell.paddingTop = 6f
                        categoryCell.paddingBottom = 6f
                        categoryCell.borderColor = BaseColor(240, 240, 240)
                        categoryTable.addCell(categoryCell)
                        
                        // Amount column
                        val amountCell = PdfPCell(Phrase(formatter.format(category.totalAmount), contentFont))
                        amountCell.horizontalAlignment = Element.ALIGN_RIGHT
                        amountCell.paddingRight = 10f
                        amountCell.paddingTop = 6f
                        amountCell.paddingBottom = 6f
                        amountCell.borderColor = BaseColor(240, 240, 240)
                        categoryTable.addCell(amountCell)
                    }
                    
                    document.add(categoryTable)
                } else {
                    // Th√™m th√¥ng b√°o kh√¥ng c√≥ d·ªØ li·ªáu
                    val noDataMessage = Paragraph(
                        "Kh√¥ng c√≥ d·ªØ li·ªáu chi ti√™u trong kho·∫£ng th·ªùi gian ƒë√£ ch·ªçn.",
                        Font(baseFont, 12f, Font.ITALIC, BaseColor.GRAY)
                    )
                    noDataMessage.alignment = Element.ALIGN_CENTER
                    noDataMessage.spacingBefore = 10f
                    noDataMessage.spacingAfter = 10f
                    document.add(noDataMessage)
                }
                
                // Add expense items detail tables for each category
                if (hasExpenseData) {
                    expenseData!!.forEach { category ->
                    if (!category.listExpense.isNullOrEmpty()) {
                        val detailTitle = Paragraph(
                            "\nChi ti·∫øt danh m·ª•c: ${category.category?.title ?: "Kh√¥ng t√™n"}",
                            Font(baseFont, 12f, Font.BOLD, BaseColor(90, 90, 90))
                        )
                        detailTitle.spacingBefore = 10f
                        detailTitle.spacingAfter = 5f
                        document.add(detailTitle)
                        
                        val detailTable = PdfPTable(4)
                        detailTable.widthPercentage = 100f
                        detailTable.setWidths(floatArrayOf(1f, 2f, 4f, 2f))
                        
                        // ƒê·∫£m b·∫£o header b·∫£ng chi ti·∫øt s·ª≠ d·ª•ng font Unicode
                        addTableHeaderCell(detailTable, "STT", baseFont)
                        addTableHeaderCell(detailTable, "Ng√†y", baseFont)
                        addTableHeaderCell(detailTable, "Ghi ch√∫", baseFont)
                        addTableHeaderCell(detailTable, "S·ªë ti·ªÅn (VND)", baseFont)
                        
                        // Add expense detail rows
                        category.listExpense?.forEachIndexed { index, expense ->
                            // STT column
                            val indexCell = PdfPCell(Phrase((index + 1).toString(), contentFont))
                            indexCell.horizontalAlignment = Element.ALIGN_CENTER
                            indexCell.paddingTop = 6f
                            indexCell.paddingBottom = 6f
                            indexCell.borderColor = BaseColor(240, 240, 240)
                            detailTable.addCell(indexCell)
                            
                            // Date column
                            val dateString = try {
                                val date = LocalDate.parse(expense.date, DateTimeFormatter.ISO_DATE)
                                date.format(dateFormatter)
                            } catch (e: Exception) {
                                Log.e(TAG, "Error parsing date: ${expense.date}, error: ${e.message}")
                                expense.date ?: ""
                            }
                            
                            val dateCell = PdfPCell(Phrase(dateString, contentFont))
                            dateCell.horizontalAlignment = Element.ALIGN_CENTER
                            dateCell.paddingTop = 6f
                            dateCell.paddingBottom = 6f
                            dateCell.borderColor = BaseColor(240, 240, 240)
                            detailTable.addCell(dateCell)
                            
                            // Note column
                            val noteCell = PdfPCell(Phrase(expense.note ?: "", contentFont))
                            noteCell.paddingLeft = 10f
                            noteCell.paddingTop = 6f
                            noteCell.paddingBottom = 6f
                            noteCell.borderColor = BaseColor(240, 240, 240)
                            detailTable.addCell(noteCell)
                            
                            // Amount column
                            val amountCell = PdfPCell(Phrase(formatter.format(expense.expense ?: 0), contentFont))
                            amountCell.horizontalAlignment = Element.ALIGN_RIGHT
                            amountCell.paddingRight = 10f
                            amountCell.paddingTop = 6f
                            amountCell.paddingBottom = 6f
                            amountCell.borderColor = BaseColor(240, 240, 240)
                            detailTable.addCell(amountCell)
                        }
                        
                        document.add(detailTable)
                    }
                    }
                }
            }
            
            // Add Income Details if needed
            if (reportType == TYPE_INCOME || reportType == TYPE_BOTH) {
                Log.d(TAG, "üìã Processing income details section")
                
                if (hasIncomeData) {
                    Log.d(TAG, "üìã Adding income details with data")
                } else {
                    Log.d(TAG, "üìã Adding income details without data (showing empty state)")
                }
                // T·∫°o font tr·ª±c ti·∫øp ƒë·ªÉ ƒë·∫£m b·∫£o encoding Unicode ƒë√∫ng
                val incomeTitle = Paragraph("\nCHI TI·∫æT THU NH·∫¨P THEO DANH M·ª§C",
                    Font(boldFont, 14f, Font.NORMAL, BaseColor(90, 90, 90)))
                incomeTitle.spacingBefore = 20f
                incomeTitle.spacingAfter = 10f
                document.add(incomeTitle)
                
                if (hasIncomeData) {
                    // Add income categories summary table
                    val categoryTable = PdfPTable(3)
                    categoryTable.widthPercentage = 100f
                    categoryTable.setWidths(floatArrayOf(1f, 5f, 3f))
                    
                    addTableHeaderCell(categoryTable, "STT", baseFont)
                    addTableHeaderCell(categoryTable, "Danh m·ª•c", baseFont)
                    addTableHeaderCell(categoryTable, "T·ªïng thu (VND)", baseFont)
                    
                    // Add category rows
                    incomeData!!.forEachIndexed { index, category ->
                        // STT column
                        val indexCell = PdfPCell(Phrase((index + 1).toString(), contentFont))
                        indexCell.horizontalAlignment = Element.ALIGN_CENTER
                        indexCell.paddingTop = 6f
                        indexCell.paddingBottom = 6f
                        indexCell.borderColor = BaseColor(240, 240, 240)
                        categoryTable.addCell(indexCell)
                        
                        // Category name column
                        val categoryCell = PdfPCell(Phrase(category.category?.title ?: "Kh√¥ng t√™n", contentFont))
                        categoryCell.paddingLeft = 10f
                        categoryCell.paddingTop = 6f
                        categoryCell.paddingBottom = 6f
                        categoryCell.borderColor = BaseColor(240, 240, 240)
                        categoryTable.addCell(categoryCell)
                        
                        // Amount column
                        val amountCell = PdfPCell(Phrase(formatter.format(category.totalAmount), contentFont))
                        amountCell.horizontalAlignment = Element.ALIGN_RIGHT
                        amountCell.paddingRight = 10f
                        amountCell.paddingTop = 6f
                        amountCell.paddingBottom = 6f
                        amountCell.borderColor = BaseColor(240, 240, 240)
                        categoryTable.addCell(amountCell)
                    }
                    
                    document.add(categoryTable)
                } else {
                    // Th√™m th√¥ng b√°o kh√¥ng c√≥ d·ªØ li·ªáu
                    val noDataMessage = Paragraph(
                        "Kh√¥ng c√≥ d·ªØ li·ªáu thu nh·∫≠p trong kho·∫£ng th·ªùi gian ƒë√£ ch·ªçn.",
                        Font(baseFont, 12f, Font.ITALIC, BaseColor.GRAY)
                    )
                    noDataMessage.alignment = Element.ALIGN_CENTER
                    noDataMessage.spacingBefore = 10f
                    noDataMessage.spacingAfter = 10f
                    document.add(noDataMessage)
                }
                
                // Add income items detail tables for each category
                if (hasIncomeData) {
                    incomeData!!.forEach { category ->
                    if (!category.listIncome.isNullOrEmpty()) {
                        val detailTitle = Paragraph(
                            "\nChi ti·∫øt danh m·ª•c: ${category.category?.title ?: "Kh√¥ng t√™n"}",
                            Font(baseFont, 12f, Font.BOLD, BaseColor(90, 90, 90))
                        )
                        detailTitle.spacingBefore = 10f
                        detailTitle.spacingAfter = 5f
                        document.add(detailTitle)
                        
                        val detailTable = PdfPTable(4)
                        detailTable.widthPercentage = 100f
                        detailTable.setWidths(floatArrayOf(1f, 2f, 4f, 2f))
                        
                        // ƒê·∫£m b·∫£o header b·∫£ng chi ti·∫øt s·ª≠ d·ª•ng font Unicode
                        addTableHeaderCell(detailTable, "STT", baseFont)
                        addTableHeaderCell(detailTable, "Ng√†y", baseFont)
                        addTableHeaderCell(detailTable, "Ghi ch√∫", baseFont)
                        addTableHeaderCell(detailTable, "S·ªë ti·ªÅn (VND)", baseFont)
                        
                        // Add income detail rows
                        category.listIncome?.forEachIndexed { index, income ->
                            // STT column
                            val indexCell = PdfPCell(Phrase((index + 1).toString(), contentFont))
                            indexCell.horizontalAlignment = Element.ALIGN_CENTER
                            indexCell.paddingTop = 6f
                            indexCell.paddingBottom = 6f
                            indexCell.borderColor = BaseColor(240, 240, 240)
                            detailTable.addCell(indexCell)
                            
                            // Date column
                            val dateString = try {
                                val date = LocalDate.parse(income.date, DateTimeFormatter.ISO_DATE)
                                date.format(dateFormatter)
                            } catch (e: Exception) {
                                Log.e(TAG, "Error parsing date: ${income.date}, error: ${e.message}")
                                income.date ?: ""
                            }
                            
                            val dateCell = PdfPCell(Phrase(dateString, contentFont))
                            dateCell.horizontalAlignment = Element.ALIGN_CENTER
                            dateCell.paddingTop = 6f
                            dateCell.paddingBottom = 6f
                            dateCell.borderColor = BaseColor(240, 240, 240)
                            detailTable.addCell(dateCell)
                            
                            // Note column
                            val noteCell = PdfPCell(Phrase(income.note ?: "", contentFont))
                            noteCell.paddingLeft = 10f
                            noteCell.paddingTop = 6f
                            noteCell.paddingBottom = 6f
                            noteCell.borderColor = BaseColor(240, 240, 240)
                            detailTable.addCell(noteCell)
                            
                            // Amount column
                            val amountCell = PdfPCell(Phrase(formatter.format(income.income ?: 0), contentFont))
                            amountCell.horizontalAlignment = Element.ALIGN_RIGHT
                            amountCell.paddingRight = 10f
                            amountCell.paddingTop = 6f
                            amountCell.paddingBottom = 6f
                            amountCell.borderColor = BaseColor(240, 240, 240)
                            detailTable.addCell(amountCell)
                        }
                        
                        document.add(detailTable)
                    }
                    }
                }
            }
        } catch (e: Exception) {
            Log.e(TAG, "Error adding details: ${e.message}", e)
        }
    }
    
    private fun addTableHeaderCell(table: PdfPTable, text: String, boldFont: BaseFont) {
        // T·∫°o font tr·ª±c ti·∫øp ƒë·ªÉ ƒë·∫£m b·∫£o encoding Unicode ƒë√∫ng cho ti√™u ƒë·ªÅ b·∫£ng
        val cell = PdfPCell(
            Phrase(text, 
                Font(boldFont, 10f, Font.NORMAL, BaseColor.WHITE))
        )
        cell.backgroundColor = BaseColor(255, 128, 0)
        cell.horizontalAlignment = Element.ALIGN_CENTER
        cell.paddingTop = 6f
        cell.paddingBottom = 6f
        cell.borderColor = BaseColor(240, 240, 240)
        table.addCell(cell)
    }
    
    /**
     * Open the generated PDF file
     */
    fun openPdfFile(uri: Uri) {
        val intent = Intent(Intent.ACTION_VIEW).apply {
            setDataAndType(uri, "application/pdf")
            flags = Intent.FLAG_ACTIVITY_NO_HISTORY or 
                    Intent.FLAG_GRANT_READ_URI_PERMISSION
        }
        
        try {
            context.startActivity(intent)
        } catch (e: Exception) {
            Log.e(TAG, "No PDF viewer app found: ${e.message}", e)
        }
    }
    
    /**
     * Get a font that supports Vietnamese characters
     */
    private fun getVietnameseFont(): BaseFont {
        return getMontserratFont("montserrat_regular.ttf")
    }
    
    /**
     * Get Montserrat bold font
     */
    private fun getVietnameseBoldFont(): BaseFont {
        return getMontserratFont("montserrat_bold.ttf")
    }
    
    /**
     * Get Montserrat medium font
     */
    private fun getVietnameseMediumFont(): BaseFont {
        return getMontserratFont("montserrat_medium.ttf")
    }
    
    /**
     * Get Montserrat italic font
     */
    private fun getVietnameseItalicFont(): BaseFont {
        return getMontserratFont("montserrat_italic.ttf")
    }
    
    /**
     * Helper method to load Montserrat font variants from assets
     * ƒê·∫£m b·∫£o font h·ªó tr·ª£ ƒë·∫ßy ƒë·ªß c√°c k√Ω t·ª± Unicode ti·∫øng Vi·ªát
     */
    private fun getMontserratFont(fontName: String): BaseFont {
        try {
            Log.d(TAG, "üî§ Loading font: $fontName")
            
            // Ki·ªÉm tra font file t·ªìn t·∫°i trong assets
            val assetManager = context.assets
            try {
                val inputStream = assetManager.open("fonts/$fontName")
                inputStream.close()
                Log.d(TAG, "‚úÖ Font file exists in assets: fonts/$fontName")
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Font file not found in assets: fonts/$fontName", e)
                throw Exception("Font file not found: $fontName")
            }
            
            // Ph∆∞∆°ng ph√°p ∆∞u ti√™n: Copy font v√†o cache v√† s·ª≠ d·ª•ng ƒë∆∞·ªùng d·∫´n file th·ª±c
            val tempFile = File(context.cacheDir, fontName)
            
            // Ch·ªâ copy l·∫°i n·∫øu file ch∆∞a t·ªìn t·∫°i ho·∫∑c b·ªã l·ªói
            if (!tempFile.exists() || tempFile.length() == 0L) {
                try {
                    Log.d(TAG, "üìÅ Copying font to cache: ${tempFile.absolutePath}")
                    val inputStream = assetManager.open("fonts/$fontName")
                    tempFile.outputStream().use { output ->
                        inputStream.copyTo(output)
                    }
                    inputStream.close()
                    Log.d(TAG, "‚úÖ Font file copied successfully. Size: ${tempFile.length()} bytes")
                } catch (e: Exception) {
                    Log.e(TAG, "‚ùå Error copying font file to cache: ${e.message}", e)
                    throw e
                }
            } else {
                Log.d(TAG, "‚úÖ Font file already exists in cache. Size: ${tempFile.length()} bytes")
            }
            
            // Ki·ªÉm tra file ƒë√£ ƒë∆∞·ª£c copy th√†nh c√¥ng
            if (!tempFile.exists() || tempFile.length() == 0L) {
                throw Exception("Font file copy failed or empty: ${tempFile.absolutePath}")
            }
            
            // S·ª≠ d·ª•ng ƒë∆∞·ªùng d·∫´n file th·ª±c v·ªõi IDENTITY_H ƒë·ªÉ h·ªó tr·ª£ ƒë·∫ßy ƒë·ªß Unicode
            Log.d(TAG, "üîß Creating BaseFont with IDENTITY_H encoding...")
            val baseFont = BaseFont.createFont(
                tempFile.absolutePath,
                BaseFont.IDENTITY_H,  // M√£ h√≥a Unicode cho ti·∫øng Vi·ªát
                BaseFont.EMBEDDED     // ƒê·∫£m b·∫£o font ƒë∆∞·ª£c nh√∫ng v√†o PDF
            )
            
            Log.d(TAG, "‚úÖ Successfully loaded font: $fontName using IDENTITY_H from file path")
            
            // Test font v·ªõi text ti·∫øng Vi·ªát ƒë·ªÉ ƒë·∫£m b·∫£o ho·∫°t ƒë·ªông
            val testText = "Ti·∫øng Vi·ªát c√≥ d·∫•u: T·∫øt ƒë·∫øn, Xu√¢n v·ªÅ"
            Log.d(TAG, "üß™ Testing font with Vietnamese text: $testText")
            
            return baseFont
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Error loading font $fontName with file path: ${e.message}", e)
            
            // Ph∆∞∆°ng ph√°p backup: S·ª≠ d·ª•ng ByteArray v·ªõi IDENTITY_H
            try {
                Log.d(TAG, "üîÑ Trying backup method with byte array for font: $fontName")
                val inputStream = context.assets.open("fonts/$fontName")
                val bytes = inputStream.readBytes()
                inputStream.close()
                
                if (bytes.isEmpty()) {
                    throw Exception("Font file is empty: $fontName")
                }
                
                Log.d(TAG, "üì¶ Font bytes loaded. Size: ${bytes.size} bytes")
                
                val baseFont = BaseFont.createFont(
                    fontName,
                    BaseFont.IDENTITY_H,  // V·∫´n s·ª≠ d·ª•ng IDENTITY_H cho Unicode
                    BaseFont.EMBEDDED,
                    true,
                    bytes,
                    null
                )
                Log.d(TAG, "‚úÖ Successfully loaded font: $fontName using IDENTITY_H and byte array")
                return baseFont
            } catch (e2: Exception) {
                Log.e(TAG, "‚ùå Error loading font with IDENTITY_H from bytes: ${e2.message}", e2)
                
                // Fallback cu·ªëi c√πng: S·ª≠ d·ª•ng font h·ªá th·ªëng v·ªõi IDENTITY_H
                Log.w(TAG, "‚ö†Ô∏è Using system font as fallback for: $fontName")
                return try {
                    when {
                        fontName.contains("bold", ignoreCase = true) -> {
                            BaseFont.createFont(BaseFont.HELVETICA_BOLD, BaseFont.IDENTITY_H, BaseFont.EMBEDDED)
                        }
                        fontName.contains("italic", ignoreCase = true) -> {
                            BaseFont.createFont(BaseFont.HELVETICA_OBLIQUE, BaseFont.IDENTITY_H, BaseFont.EMBEDDED)
                        }
                        else -> {
                            BaseFont.createFont(BaseFont.HELVETICA, BaseFont.IDENTITY_H, BaseFont.EMBEDDED)
                        }
                    }
                } catch (e3: Exception) {
                    Log.e(TAG, "‚ùå Even system font failed with IDENTITY_H: ${e3.message}", e3)
                    // Fallback cu·ªëi c√πng: s·ª≠ d·ª•ng CP1252 cho system font
                    when {
                        fontName.contains("bold", ignoreCase = true) -> {
                            BaseFont.createFont(BaseFont.HELVETICA_BOLD, BaseFont.CP1252, BaseFont.EMBEDDED)
                        }
                        fontName.contains("italic", ignoreCase = true) -> {
                            BaseFont.createFont(BaseFont.HELVETICA_OBLIQUE, BaseFont.CP1252, BaseFont.EMBEDDED)
                        }
                        else -> {
                            BaseFont.createFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.EMBEDDED)
                        }
                    }
                }
            }
        }
    }
} 